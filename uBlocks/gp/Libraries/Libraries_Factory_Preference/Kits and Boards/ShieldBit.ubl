module ShieldBit 'Output'
author 'Joan GuillÃ©n'
version 1 3 
depends Color Tone 
tags keyestudio 'micro:bit' 
choices sb_motorTypes 'sb;all_motors' 'sb;servomotors' 'sb;DC/Stepper_motors' 
choices sb_stepperSteps turns degrees 
choices sb_motorDirections clockwise 'counter-clockwise' 
description 'Provides custom blocks for the shield:bit, which supports 4 DC motors, 2 stepper motors, speaker, headphone jack with volume control, and 4 NeoPixel LEDs.'
variables _sb_neoPixels _sb_pca9685_st_steps 

  spec ' ' 'sb_LEDs_off' 'sb LEDs off'
  spec ' ' 'sb_set_LEDs_to_color' 'sb set all LEDs to _' 'color'
  spec ' ' 'sb_set_LED_to_color' 'sb set LED _ (1-4) to _' 'num color' 1
  space
  spec ' ' 'sb_set_audio_output' 'sb send audio to shield _' 'bool' true
  space
  spec ' ' 'sb_stop_motors' 'sb stop _' 'menu.sb_motorTypes' 'sb;all_motors'
  space
  spec ' ' 'sb_turn_180_servo' 'sb turn 180 servo S- _ (1-8) to angle _' 'num num' 1 90
  spec ' ' 'sb_turn_360_servo' 'sb turn 360 servo S- _ (1-8) _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  space
  spec ' ' 'sb_turn_DC_motor' 'sb turn DC M- _ (1-4) motor _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  spec ' ' 'sb_turn_stepper_motor' 'sb turn Stepper- _ (1-2) motor _ for _ _' 'num menu.sb_motorDirections num menu.sb_stepperSteps' 1 'clockwise' 1 'turns'
  space
  spec ' ' 'sb_set_PWM' 'sb set pin S- _ (1-8) to _ %' 'num num' 1 100
  space
  spec ' ' '_sb_neoPixels_init' '_sb_neoPixels_init'
  spec ' ' '_sb_neoPixels_update' '_sb_neoPixels_update'
  space
  spec ' ' '_sb_pca9685_init' '_sb_pca9685_init'
  spec ' ' '_sb_pca9685_pwm' '_sb_pca9685_pwm pin _ from _ to _' 'num num num' 1 0 0

to '_sb_neoPixels_init' {
  comment 'Create NeoPixel list, if necessary.'
  if (_sb_neoPixels == 0) {
    _sb_neoPixels = (newList 4)
  }
}

to '_sb_neoPixels_update' {
  comment 'Always set the NeoPixel pin.'
  if ((boardType) == 'ESP32') {
    '[display:neoPixelSetPin]' 5 (booleanConstant false)
  } else {
    '[display:neoPixelSetPin]' 16 (booleanConstant false)
  }
  '[display:neoPixelSend]' _sb_neoPixels
  waitMicros 300
}

to '_sb_pca9685_init' {
  comment 'Return if already initialized.'
  if (_sb_pca9685_st_steps != 0) {
    return
  }
  _sb_pca9685_st_steps = 512
  i2cSet (hexToInt '40') 0 128
  waitMillis 100
  i2cSet (hexToInt '40') 0 16
  local '_sb_pca9685_prescale' 129
  i2cSet (hexToInt '40') (hexToInt 'FE') _sb_pca9685_prescale
  i2cSet (hexToInt '40') 0 0
  waitMillis 100
  i2cSet (hexToInt '40') 0 160
  for i 16 {
    '_sb_pca9685_pwm' (i - 1) 0 0
  }
}

to '_sb_pca9685_pwm' pin in out {
  '[sensors:i2cWrite]' 64 ('[data:makeList]' (6 + (4 * pin)) (in & 255) ((in >> 8) & 255) (out & 255) ((out >> 8) & 255))
}

to sb_LEDs_off {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels 0
  '_sb_neoPixels_update'
}

to sb_set_LED_to_color i color {
  '_sb_neoPixels_init'
  atPut i _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_LEDs_to_color color {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_PWM pin value {
  '_sb_pca9685_init'
  if (and (1 <= pin) (pin <= 8)) {
    if (value < 0) {value = 0}
    if (100 < value) {value = 100}
    value = ((value * 4095) / 100)
    '_sb_pca9685_pwm' (pin + 7) 0 value
  }
}

to sb_set_audio_output useShield {
  if useShield {
    if ((boardType) == 'ESP32') {
      _tonePin = 12
    } else {
      _tonePin = 0
    }
  } else {
    if ((boardType) == 'ESP32') {
      _tonePin = 33
    } else {
      _tonePin = -1
    }
  }
  _toneInitalized = (booleanConstant true)
}

to sb_stop_motors type {
  '_sb_pca9685_init'
  if (or (type == 'sb;DC/Steppers') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (or (type == 'sb;servomotors') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i + 7) 0 0
    }
  }
}

to sb_turn_180_servo s angle {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (angle < 0) {angle = 0}
    if (180 < angle) {angle = 180}
    angle = (((((angle * 1800) / 180) + 600) * 4095) / 20000)
    '_sb_pca9685_pwm' (s + 7) 0 angle
  }
}

to sb_turn_360_servo s direction speed {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    if (direction == 'counter-clockwise') {
      speed = (((((speed * 900) / 100) + 1500) * 4095) / 20000)
    } else {
      speed = (((((speed * -900) / 100) + 1500) * 4095) / 20000)
    }
    '_sb_pca9685_pwm' (s + 7) 0 speed
  }
}

to sb_turn_DC_motor m direction speed {
  '_sb_pca9685_init'
  if (and (1 <= m) (m <= 4)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    speed = ((speed * 4095) / 100)
    local 'pin2' ((m - 1) * 2)
    local 'pin1' (pin2 + 1)
    if (or (and (or (m == 1) (m == 2)) (direction == 'counter-clockwise')) (and (or (m == 3) (m == 4)) (not (direction == 'counter-clockwise')))) {
      pin2 = pin1
      pin1 = (pin2 - 1)
    }
    '_sb_pca9685_pwm' pin1 0 0
    '_sb_pca9685_pwm' pin2 0 speed
  }
}

to sb_turn_stepper_motor stp direction steps unit {
  '_sb_pca9685_init'
  if (steps < 0) {
    steps = 0
  }
  steps = (steps * ((1000 * _sb_pca9685_st_steps) / 50))
  if (unit == 'degrees') {
    steps = (steps / 360)
  }
  if (stp == 1) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 1 0 1023
      '_sb_pca9685_pwm' 0 1024 2047
      '_sb_pca9685_pwm' 3 2048 3071
      '_sb_pca9685_pwm' 2 3072 4095
    } else {
      '_sb_pca9685_pwm' 2 0 1023
      '_sb_pca9685_pwm' 3 1024 2047
      '_sb_pca9685_pwm' 0 2048 3071
      '_sb_pca9685_pwm' 1 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (stp == 2) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 7 0 1023
      '_sb_pca9685_pwm' 6 1024 2047
      '_sb_pca9685_pwm' 5 2048 3071
      '_sb_pca9685_pwm' 4 3072 4095
    } else {
      '_sb_pca9685_pwm' 4 0 1023
      '_sb_pca9685_pwm' 5 1024 2047
      '_sb_pca9685_pwm' 6 2048 3071
      '_sb_pca9685_pwm' 7 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i + 3) 0 0
    }
  }
}

