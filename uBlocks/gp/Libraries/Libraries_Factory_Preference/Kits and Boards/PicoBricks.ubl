module PicoBricks
author 'Turgut Guneysu'
version 2 8 
depends 'Temperature Humidity (DHT11, DHT22)' 'Temperature Humidity (SHTC3)' 'IR Remote' 
choices servoNumMenu '1' '2' '3' '4' ALL 
choices dcNumMenu 'M1:1' 'M2:2' ALL 
description 'Robotistan PicoBricks Library

This library controls these Pico Bricks components:
- Red LED
- RGB LED
- 2 x DC Motors 
- 4 x Servos (using the NEW motor controller card) 
- Piezo speaker
- Relay Switch (5V-250V, 5A)
- Button
- Potentiometer (variable resistor)
- Light sensor (light dependent resistor)
- Temperature and Humidity sensor (DHT11 & SHTC3)
- IR Remote

Use separate libraries to control:
- Servo motors (using old motor controller)
- Graphic display (OLED) or TFT
- WIFI/Bluetooth expansion board

See https://www.robotistan.com, 
https://wiki.microblocks.fun/boards/pico

CHANGES:
- switched to renamed DHT library: Temperature humidity (DHT11, DHT22)
- motor card changed to I2C model: 2xDC bidirectional and 4xServo 
- Auto detect old vs new motor cards
- Auto detect old vs new Temp/Humid sensors
- servo set to -90 to 90
- Temp&Humidity sensor changed to SHTC3 for new boards
- PicoBricks humidity & temperature return results based on the sensor used
- uses: i2c device exists
- Added IR Remote for new boards
'
variables _pb_initialized _pb_pin_RedLED _pb_pin_Button _pb_pin_DHT _pb_pin_IRrecv _pb_pin_Relay _pb_pin_Pot _pb_pin_LDR _pb_pin_Buzzer _pb_pin_Motor1 _pb_pin_Motor2 _pb_pin_RGB_LED _pb_pin_TX _pb_pin_RX _pb_motor_i2c 

  spec ' ' 'pb_set_rgb_color' 'PicoBricks set RGB LED color _' 'color'
  spec 'r' 'pb_rgb_color' 'PicoBricks color r _ g _ b _ (0-255)' 'auto auto auto' 0 0 0
  spec 'r' 'pb_random_color' 'PicoBricks random color'
  spec ' ' 'pb_turn_off_RGB' 'PicoBricks turn off RGB LED'
  space
  spec 'r' 'pb_button' 'PicoBricks button'
  spec ' ' 'pb_set_red_LED' 'PicoBricks set red LED _' 'bool' true
  space
  spec 'r' 'pb_humidity' 'PicoBricks humidity'
  spec 'r' 'pb_temperature' 'PicoBricks temperature (Â°C)'
  space
  spec ' ' 'pb_set_relay' 'PicoBricks set relay _' 'bool' true
  space
  spec 'r' 'pb_ir_code_received' 'PicoBricks IR Code Received?'
  spec 'r' 'pb_ir_code' 'PicoBricks IR Code'
  spec 'r' 'pb_ir_recv_code' 'PicoBricks Receive IR Code'
  space
  spec ' ' 'pb_beep' 'PicoBricks beep _ ms' 'auto' 100
  space
  spec 'r' 'pb_light_sensor' 'PicoBricks light sensor (0-100) %'
  space
  spec 'r' 'pb_potentiometer' 'PicoBricks potentiometer'
  space
  spec ' ' 'pb_set_motor_speed' 'PicoBricks set motor _ speed _ (-100 to 100)' 'menu.dcNumMenu num' 1 50
  spec ' ' 'pb_set_servo_angle' 'PicoBricks set servo _ to _ degrees(-90 to 90)' 'menu.servoNumMenu num' 1 90
  space
  spec ' ' '_pb_init_pins' '_pb_init_pins'
  spec 'r' '_pb_new_controller?' '_pb_new_controller?'

to '_pb_init_pins' {
  if _pb_initialized {return}
  _pb_pin_RGB_LED = 6
  _pb_pin_RedLED = 7
  _pb_pin_Button = 10
  _pb_pin_DHT = 11
  _pb_pin_Relay = 12
  _pb_pin_Buzzer = 20
  _pb_pin_Motor1 = 21
  _pb_pin_Motor2 = 22
  _pb_pin_IRrecv = 0
  attachIR _pb_pin_IRrecv
  _pb_pin_Pot = 26
  _pb_pin_LDR = 27
  _pb_pin_TX = 0
  _pb_pin_RX = 1
  _pb_motor_i2c = (hexToInt '22')
  _pb_initialized = (booleanConstant true)
}

to '_pb_new_controller?' {
  comment 'Test I2C write to detect presence of NEW motor control TB6612.
subsequent READ will return:
  -4: no card found,   38: card present
Result determines which type of control command to use.'
  return (ifExpression ('[sensors:i2cExists]' (hexToInt '22')) (booleanConstant true) (booleanConstant false))
}

to pb_beep duration {
  local 'buzzer pin' 20
  '[io:playTone]' (v 'buzzer pin') 300
  waitMillis duration
  '[io:playTone]' (v 'buzzer pin') 0
}

to pb_button {
  '_pb_init_pins'
  return (digitalReadOp _pb_pin_Button)
}

to pb_humidity {
  '_pb_init_pins'
  if (and ((humidity_DHT11 11) == 0) ((temperature_DHT11 11) == 0)) {
    return (shtc3_humidity)
  } else {
    return (humidity_DHT11 _pb_pin_DHT)
  }
}

to pb_ir_code {
  '_pb_init_pins'
  return (ir_last_code)
}

to pb_ir_code_received {
  '_pb_init_pins'
  return (ir_code_received)
}

to pb_ir_recv_code {
  '_pb_init_pins'
  return (receiveIR)
}

to pb_light_sensor {
  comment 'Returns Light Values s a percentage:
0: dark,  100: light'
  '_pb_init_pins'
  return ('[misc:rescale]' (analogReadOp _pb_pin_LDR) 0 1023 100 0)
}

to pb_potentiometer {
  '_pb_init_pins'
  return (analogReadOp _pb_pin_Pot)
}

to pb_random_color {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to pb_rgb_color r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to pb_set_motor_speed which speed {
  comment 'New Motor Logic:
Detects old/new motor controller card and adjusts accordingly.

Fwd:0 Bwd:1
WORKING Motor Control
Does not drive single motor @ 60 and below
and dual motors @128 and below'
  '_pb_init_pins'
  if ('_pb_new_controller?') {
    speed = (ifExpression (speed < -100) -100 (ifExpression (speed > 100) 100 speed))
    local 'dir' (ifExpression (speed >= 0) 0 1)
    speed = ('[misc:rescale]' (absoluteValue speed) 0 100 0 255)
    if ('ALL' == which) {
      local 'from' 1
      local 'to' 2
    } else {
      local 'from' which
      local 'to' which
    }
    for i ('[data:range]' from to) {
      '[sensors:i2cWrite]' _pb_motor_i2c ('[data:asByteArray]' ('[data:makeList]' (hexToInt '26') i speed dir ((i ^ speed) ^ dir)))
    }
  } else {
    comment 'OLD motor controller'
    speed = (maximum 0 (minimum speed 100))
    if (which == 1) {
      analogWriteOp _pb_pin_Motor1 ((1023 * speed) / 100)
    } (which == 2) {
      analogWriteOp _pb_pin_Motor2 ((1023 * speed) / 100)
    } (which == 'ALL') {
      analogWriteOp _pb_pin_Motor1 ((1023 * speed) / 100)
      analogWriteOp _pb_pin_Motor2 ((1023 * speed) / 100)
    }
  }
}

to pb_set_red_LED aBoolean {
  '_pb_init_pins'
  digitalWriteOp _pb_pin_RedLED aBoolean
}

to pb_set_relay aBoolean {
  '_pb_init_pins'
  digitalWriteOp _pb_pin_Relay aBoolean
}

to pb_set_rgb_color color {
  '_pb_init_pins'
  '[display:neoPixelSetPin]' _pb_pin_RGB_LED false
  '[display:neoPixelSend]' color
  waitMillis 1
}

to pb_set_servo_angle which angle {
  comment 'S1:3 S2:4 S3:5 S4:6 ALL'
  '_pb_init_pins'
  if ('_pb_new_controller?') {
    angle = (ifExpression (angle < -90) -90 (ifExpression (angle > 90) 90 angle))
    angle = (90 - angle)
    if ('ALL' == which) {
      local 'from' 3
      local 'to' 6
    } else {
      local 's#' ('[data:makeList]' 3 4 5 6)
      which = (at which s#)
      local 'from' which
      local 'to' which
    }
    for i ('[data:range]' from to) {
      '[sensors:i2cWrite]' _pb_motor_i2c ('[data:asByteArray]' ('[data:makeList]' (hexToInt '26') i 0 angle (i ^ angle)))
      waitMillis 75
    }
  } else {
    sayIt 'For old motor controller modules 
please use SERVO Library.'
  }
}

to pb_temperature {
  '_pb_init_pins'
  if (and ((humidity_DHT11 11) == 0) ((temperature_DHT11 11) == 0)) {
    return (shtc3_temperature)
  } else {
    return (temperature_DHT11 _pb_pin_DHT)
  }
}

to pb_turn_off_RGB {
  '_pb_init_pins'
  '[display:neoPixelSetPin]' _pb_pin_RGB_LED false
  '[display:neoPixelSend]' 0
  waitMillis 1
}

