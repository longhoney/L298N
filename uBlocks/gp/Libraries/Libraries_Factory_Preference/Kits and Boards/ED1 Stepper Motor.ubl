module 'ED1 Stepper Motor' Output
author MicroBlocks
version 1 2 
tags '28byj-48' stepper motor fantastic ed1 
choices directions clockwise 'counter-clockwise' 
description 'Provides blocks to control 28BYJ-48 stepper motors, like the ones included in the Fantastic robot kit for the Citilab ED1 board.

It also exposes the IO expander pins to be used as extra digital pins.
'
variables _ED1_stepper_init _ED1_CW1 _ED1_CW2 _ED1_CCW1 _ED1_CCW2 _ED1_motor_running _ED1_exp_register 

  spec ' ' 'motor step' 'move motor _ _ steps _' 'auto auto menu.directions' 1 '128' 'clockwise'
  spec ' ' 'move motor ' 'move motor 1 _ and motor 2 _ _ steps' 'menu.directions menu.directions auto' 'clockwise' 'counter-clockwise' '64'
  spec ' ' 'motor angle' 'move motor _ angle _ Â°' 'auto auto' '1' '-90'
  spec ' ' 'motor turns' 'move motor _ _ complete turns' 'auto auto' '1' '3'
  spec ' ' 'stop steppers' 'stop steppers'
  space
  spec ' ' 'set motor pin' 'set motor pin _ for motor _ to _' 'auto auto bool' 2 1 true
  space
  spec ' ' '_ED1_stepper_init' '_ED1_stepper_init'
  spec ' ' '_ED1 init motor pins' '_ED1 init motor pins'

to '_ED1_stepper_init' {
  if (_ED1_stepper_init == 0) {
    comment '0 for ED1 V2'
    if ((i2cGet (hexToInt '20') 1) == 0) {
      _ED1_exp_register = (hexToInt '9')
    } else {
      _ED1_exp_register = (hexToInt '14')
    }
    _ED1_CW1 = (hexToInt 'C')
    _ED1_CW2 = (hexToInt '3')
    _ED1_CCW1 = (hexToInt '3')
    _ED1_CCW2 = (hexToInt 'C')
    _ED1_stepper_init = (booleanConstant true)
    i2cSet (hexToInt '20') 0 0
    i2cSet (hexToInt '20') 6 255
  }
}

to '_ED1 init motor pins' {
  if (_ED1_stepper_init == 0) {
    if ((i2cGet (hexToInt '20') 1) == 0) {
      _ED1_exp_register = (hexToInt 'A')
    } else {
      _ED1_exp_register = (hexToInt '14')
    }
    _ED1_stepper_init = true
    i2cSet (hexToInt '20') 0 0
    i2cSet (hexToInt '20') 6 255
  }
}

to 'motor angle' 'motor number' angle {
  local 'direction' 'clockwise'
  if (angle < 0) {
    direction = 'counter-clockwise'
    angle = (angle * -1)
  }
  'motor step' (v 'motor number') ((142 * angle) / 100) direction
}

to 'motor step' 'motor number' steps direction {
  '_ED1_stepper_init'
  _ED1_motor_running = (booleanConstant true)
  repeat steps {
    if _ED1_motor_running {
      i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '9') << (((v 'motor number') % 2) << 2))
      waitMicros 1500
      if (direction == 'clockwise') {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt 'C') << (((v 'motor number') % 2) << 2))
      } else {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '3') << (((v 'motor number') % 2) << 2))
      }
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '6') << (((v 'motor number') % 2) << 2))
      waitMicros 1500
      if (direction == 'clockwise') {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt '3') << (((v 'motor number') % 2) << 2))
      } else {
        i2cSet (hexToInt '20') _ED1_exp_register ((hexToInt 'C') << (((v 'motor number') % 2) << 2))
      }
      waitMicros 1500
    }
  }
  'stop steppers'
}

to 'motor turns' 'motor number' turns {
  local 'direction' 'clockwise'
  if (turns < 0) {
    direction = 'counter-clockwise'
    turns = (turns * -1)
  }
  'motor step' (v 'motor number') (turns * 512) direction
}

to 'move motor ' 'direction 1' 'direction 2' steps {
  '_ED1_stepper_init'
  _ED1_motor_running = (booleanConstant true)
  local 'step 1' 0
  local 'step 2' 0
  if ((v 'direction 1') == 'clockwise') {
    'step 1' = _ED1_CW1
    'step 2' = _ED1_CW2
  } else {
    'step 1' = _ED1_CCW1
    'step 2' = _ED1_CCW2
  }
  if ((v 'direction 2') == 'clockwise') {
    'step 1' = (((v 'step 1') << 4) | _ED1_CW1)
    'step 2' = (((v 'step 2') << 4) | _ED1_CW2)
  } else {
    'step 1' = (((v 'step 1') << 4) | _ED1_CCW1)
    'step 2' = (((v 'step 2') << 4) | _ED1_CCW2)
  }
  repeat steps {
    if _ED1_motor_running {
      i2cSet (hexToInt '20') _ED1_exp_register (hexToInt '99')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (v 'step 1')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (hexToInt '66')
      waitMicros 1500
      i2cSet (hexToInt '20') _ED1_exp_register (v 'step 2')
      waitMicros 1500
    }
  }
  'stop steppers'
}

to 'set motor pin' pin motor value {
  '_ED1 init motor pins'
  local 'pins' (i2cGet (hexToInt '20') _ED1_exp_register)
  waitMillis 1
  if value {
    pins = (pins | ((1 << (pin - 1)) << ((motor % 2) << 2)))
  } else {
    pins = (pins & ('~' ((1 << (pin - 1)) << ((motor % 2) << 2))))
  }
  i2cSet (hexToInt '20') _ED1_exp_register pins
  waitMillis 20
}

to 'stop steppers' {
  i2cSet (hexToInt '20') _ED1_exp_register 0
  _ED1_motor_running = (booleanConstant false)
  waitMicros 1500
}

