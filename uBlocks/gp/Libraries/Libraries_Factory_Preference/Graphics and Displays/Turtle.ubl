module Turtle Output
author MicroBlocks
version 1 5 
depends _TFT 
description 'Draw with turtle geometry on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1, (discontinued) IoT-Bus, or Boardie.

Home is the center of the screen.

Coordinates for the "go to" command are the same as the TFT library: origin at top-left, y increasing down.

Default direction is to the right. Positive turn and direction angles are clockwise.
'
variables _turtleX _turtleY _turtleHeading _turtlePenIsDown _turtleColor 

  spec ' ' 'home' 'trtl;home'
  spec ' ' 'move' 'move _' 'auto' '10'
  spec ' ' 'turnBy' 'turn _ degrees' 'auto' 90
  spec ' ' 'turnFraction' 'turn _ / _ of circle' 'auto auto' 1 4
  spec ' ' 'setHeading' 'point in direction _' 'auto' 0
  space
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  spec ' ' 'clearDisplay' 'fill display with _' 'color' 11271427
  space
  spec ' ' 'pen down' 'pen down'
  spec ' ' 'pen up' 'pen up'
  spec ' ' 'set pen color to' 'set pen color to _' 'color' 16777215
  spec ' ' 'setPenToRandomColor' 'set pen to random color'
  space
  spec ' ' 'go to x' 'go to x _ y _' 'auto auto' '10' '10'
  spec 'r' 'turtle_x' 'turtle x'
  spec 'r' 'turtle_y' 'turtle y'
  space
  spec ' ' '_turtleNotes' '_turtleNotes'

to '_turtleNotes' {
  comment 'Representation:
  _turtleHeading is in hundreths of a degree  (e.g. 4500 means 45 degrees)
  _turtleX and _turtleY are scaled by 16384 (2^14)

The sine function takes an angle in hundreds of a degree and returns a
number scaled by 16384. _turtleX and _turtleY are also scaled by 16384.
Those numbers are shifted right by 14 bits to get pixel locations.'
}

to clearDisplay color {
  '[tft:rect]' 0 0 ('[tft:getWidth]') ('[tft:getHeight]') color true
  comment 'Give the display controller time to finish this operation'
  waitMillis 1
}

to 'go to x' x y {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  _turtleX = (x << 14)
  _turtleY = (y << 14)
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenIsDown {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to home {
  if (0 == _turtlePenIsDown) {
    'set pen color to' (colorSwatch 7 255 1 255)
    '[display:mbDisplayOff]'
    'pen up'
  }
  'go to x' (('[tft:getWidth]') / 2) (('[tft:getHeight]') / 2)
  setHeading 0
}

to move n {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  comment 'The cosine is just the sine shifted by 90 degrees.'
  _turtleX += (n * ('[misc:sin]' (_turtleHeading + 9000)))
  _turtleY += (n * ('[misc:sin]' _turtleHeading))
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenIsDown {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to 'pen down' {
  _turtlePenIsDown = (booleanConstant true)
}

to 'pen up' {
  _turtlePenIsDown = (booleanConstant false)
}

to 'set pen color to' color {
  _turtleColor = color
}

to setHeading a {
  _turtleHeading = ((a * 100) % 36000)
}

to setPenToRandomColor {
  local 'c1' (random 150 220)
  local 'c2' (random 0 ((3 * c1) / 4))
  local 'c3' (random 0 ((3 * c1) / 4))
  local 'which' (random 1 3)
  if (1 == which) {
    _turtleColor = ((c1 << 16) | ((c2 << 8) | c3))
  } (2 == which) {
    _turtleColor = ((c2 << 16) | ((c3 << 8) | c1))
  } else {
    _turtleColor = ((c3 << 16) | ((c1 << 8) | c2))
  }
}

to turnBy a {
  _turtleHeading += (a * 100)
  _turtleHeading = (_turtleHeading % 36000)
}

to turnFraction num denom {
  _turtleHeading += ((num * 36000) / denom)
  _turtleHeading = (_turtleHeading % 36000)
}

to turtle_x {
  return (_turtleX >> 14)
}

to turtle_y {
  return (_turtleY >> 14)
}

