module 'OLED Turtle' Output
author 'Turgut Guneysu'
version 1 13 
depends '_OLED Graphics' _dec2anyBase 
choices DegMenu '45' '90' '135' '180' '225' '270' '315' 
choices SizeMenu small large 
choices PenMenu up down 
description 'Turtle Graphics based on the OLED Library.
Will write text anywhere on screen.
Degreee turns are restricted to 45degs.
Changes: Multiline Text support at any x, y with wrap
            and fast/slow draw (slow:by pixel)
         Small and Large Turtles
         Direction bug fix
         +/- direction changes
         Blocks renamed
         Works with OLED Graphics1.11
'
variables Tpen Tdir Tx Ty TShapes _TDirs _TSaveGDBuffInfo TpenPrev _GDIndex _dX _dY _bits _charBMPList _convTBL _TSize _TDisp size dir num timer _idx penDirection penX penY points startX startY endX endY x y string turtle col row 

  spec ' ' 'TCircle' 'draw circle radius _' 'auto' '10'
  spec ' ' 'TClear' 'Tclear'
  spec ' ' 'TGo to x' 'go to x _ y _' 'num num' 0 0
  spec ' ' 'THome' 'home'
  spec ' ' 'TInit' 'initialize turtle _' 'str.SizeMenu' 'large'
  spec ' ' 'TMove' 'move _' 'auto' '10'
  spec ' ' 'TPenDOWN' 'pen down'
  spec ' ' 'TPenUP' 'pen  up'
  spec ' ' 'TPoint in direction' 'point in direction (0-360) _' 'num' 0
  spec ' ' 'TText' 'write text _ x _ y _ fast _' 'auto num num bool' 'hello' 0 0 true
  spec ' ' 'TTurn Deg' 'turn _ degrees' 'auto' 45
  spec 'r' 'WRU' 'wru'
  spec ' ' '_TDraw' '_TDraw X _ Y _' 'num auto' 0 0
  spec ' ' '_TRestoreGDBuff' '_TRestoreGDBuff'
  spec ' ' '_TSaveGDBuff' '_TSaveGDBuff _ _' 'auto auto' '10' '10'
  spec 'r' '_num2TF' '_num2TF _' 'auto' 0
  spec 'r' '_toString' '_toString _' 'auto' ''

to TCircle rad {
  comment 'Go to center of circle x,y
Then call this block with desired radius.
It is also possible to make a circle by moving and turning.'
  if Tpen {
    OLEDdrawCircle Tx Ty rad false
  } else {
    OLEDdrawCircle Tx Ty rad true
  }
}

to TClear {
  comment 'Clears the screen and initlalizes the turtle controls.'
  OLEDclear
  TpenPrev = (booleanConstant false)
  Tpen = (booleanConstant false)
  Tdir = 1
  _TSaveGDBuffInfo = ('[data:makeList]')
}

to 'TGo to x' x y {
  comment 'Places the turtle at x, y.
Image of turtle is based on penDirection.
If PEN is down, a line will be drawn from 
current location to the destination.
If PEN is up, line will be erased.'
  '_TRestoreGDBuff'
  local 'curX' (penX >> 14)
  local 'curY' (penY >> 14)
  if Tpen {
    OLEDdrawLine curX curY x y false
    '_TSaveGDBuff' curX curY
    '_TDraw' x y
  } else {
    OLEDdrawLine curX curY x y true
    '_TSaveGDBuff' curX curY
    '_TDraw' x y
  }
  penX = (x << 14)
  penY = (y << 14)
  TpenPrev = Tpen
}

to THome {
  comment 'Places turtle at the center of screen'
  penDirection = 0
  'TGo to x' 64 32
}

to TInit size {
  comment 'Initializes all turtle controls.
Turtle is either Small (3x3) or Large (5x5).
TShapes is bitmaps of Turtles (LSB-MSB)  starting with ->
 in clockwise rotation, numbered 1-8.

small: 0-7
/1:072  /2:467  /3:262  /4:764  /5:270  /6:731  /7:232  /8:137

large: 0-31
/1:0 0 31 14 4  /2:16 24 28 30 31  /3;4 12 28 12 4  /4:31 30 28 24 16 
/5:4 14 31 0 0  /6:31 15 7 3 1        /7:4 6 7 6 4        /8:1 3 7 15 31'
  _TSaveGDBuffInfo = ('[data:makeList]')
  if (size == 'small') {
    TShapes = ('[data:makeList]' ('[data:makeList]' 0 7 2) ('[data:makeList]' 4 6 7) ('[data:makeList]' 2 6 2) ('[data:makeList]' 7 6 4) ('[data:makeList]' 2 7 0) ('[data:makeList]' 7 3 1) ('[data:makeList]' 2 3 2) ('[data:makeList]' 1 3 7))
    _TSize = 3
    _TDisp = 1
  } else {
    TShapes = ('[data:makeList]' ('[data:makeList]' 0 0 31 14 4) ('[data:makeList]' 16 24 28 30 31) ('[data:makeList]' 4 12 28 12 4) ('[data:makeList]' 31 30 28 24 16) ('[data:makeList]' 4 14 31 0 0) ('[data:makeList]' 31 15 7 3 1) ('[data:makeList]' 4 6 7 6 4) ('[data:makeList]' 1 3 7 15 31))
    _TSize = 5
    _TDisp = 2
  }
  TClear
  THome
}

to TMove steps {
  comment 'Moves the turtle steps at a time. 
If PEN is down, line will be drawn, if  up line will be erased.

Representation:
  penDirection is in hundreths of a degree (e.g. 4500 means 45 degrees)
  penX and penY are scaled by 16384 (2^14)

The sine function takes an angle in hundreds of a degree and returns a
number scaled by 16384. penX and penY are also scaled by 16384.
Those numbers are shifted right by 14 bits to get pixel locations.'
  local 'startX' (penX >> 14)
  local 'startY' (penY >> 14)
  comment 'The cosine is just the sine shifted by 90 degrees.'
  penX += (steps * ('[misc:sin]' (penDirection + 9000)))
  penY += (steps * ('[misc:sin]' penDirection))
  local 'endX' (penX >> 14)
  local 'endY' (penY >> 14)
  '_TRestoreGDBuff'
  if Tpen {
    OLEDdrawLine startX startY endX endY false
    '_TSaveGDBuff' startX startY
    '_TDraw' endX endY
  } else {
    OLEDdrawLine startX startY endX endY true
    '_TSaveGDBuff' startX startY
    '_TDraw' endX endY
  }
  TpenPrev = Tpen
}

to TPenDOWN {
  comment 'Sets PEN down, causing any movement to draw.'
  Tpen = (booleanConstant true)
}

to TPenUP {
  comment 'Sets PEN up.
Movements erase.'
  Tpen = (booleanConstant false)
}

to 'TPoint in direction' dir {
  comment 'Sets value of the penDirection variable.
dir=0 is to the right.
Corresponding turtle image will be to nearest 45 deg.'
  dir = (absoluteValue dir)
  penDirection = ((dir * 100) % 36000)
  comment 'Selects one of 8 cardinal directions:'
  local '_Tdir' '→↘↓↙←↖↑↗'
  if (0 == penDirection) {
    Tdir = 1
  } else {
    Tdir = (minimum 8 (((dir / 45) % 45) + 1))
  }
  '_TDraw' Tx Ty
}

to TText string x y fast {
  comment 'Writes text at any x,y location with wrap to next line at x.
If 56 < y < 63, character bitmap will be truncated.
You can use LF (unicode = 10) to skip to next line in text.'
  _dX = 0
  for char string {
    _dY = 0
    if fast {
      '_TRestoreGDBuff'
    }
    if (10 == ('[data:unicodeAt]' 1 char)) {
      _dX = 0
      y += 8
    } (13 == ('[data:unicodeAt]' 1 char)) {
      noop
    } else {
      _charBMPList = ('_cBMP' char false)
      for byte _charBMPList {
        _dY = 0
        for bit ('dec2any Base' '2' byte 8 true) {
          if (not fast) {'_TRestoreGDBuff'}
          if (and ((x + _dX) <= 127) ((y + _dY) <= 63)) {OLEDpixel (x + _dX) (y + _dY) ('_num2TF' bit)}
          comment 'if not fast'
          if (not fast) {
            '_TDraw' (x + _dX) (y + _dY)
          }
          _dY += 1
        }
        _dX += 1
        if ((x + _dX) > 127) {
          _dX = 0
          y += 8
          if (y > 63) {
            y = 0
            _dY = 0
          }
        }
      }
    }
    comment 'if fast'
    if fast {
      '_TDraw' (x + _dX) (y + _dY)
    }
    _textX = (x + _dX)
    _textY = y
  }
}

to 'TTurn Deg' deg {
  comment 'Accepts +/- deg changes and sets penDirection variable.
Corresponding Turtle image will be to nearest 45 deg.'
  local '_Tdir' '→↘↓↙←↖↑↗'
  penDirection += (deg * 100)
  if (penDirection < 0) {
    penDirection = ((36000 + penDirection) % 36000)
  } else {
    penDirection = (penDirection % 36000)
  }
  '_TRestoreGDBuff'
  '_TDraw' Tx Ty
}

to WRU {
  comment 'Displays Turtle location and direction info'
  local 'penStat' 'UP'
  if Tpen {
    penStat = 'DOWN'
  }
  return ('[data:join]' ('[data:join]' 'Turtle points to:' (penDirection / 100)) ('[data:join]' ('[data:unicodeString]' 10) 'Located @:') ' x:' Tx ' y:' Ty ('[data:unicodeString]' 10) 'Pen:' penStat)
}

to '_TDraw' x y {
  comment 'Turtle is a large (5x5) or small (3x3) bitmap shape. 
Turtle location x,y is always located at the center of this matrix and is marked by pixel "o".
There are 8 turtle shapes, each rotated clockwise by 45 degrees.
eg: #1 shape is:
..x..
..xx.
..oxx
..xx.
..x..

To calculate the start position to draw the turtle, _Tdisp is used.
_Tdisp is 2 for the large turtle and 1 for the small  turtle. It indicates where the "o"
pixel is, based on the edge of the matrix.
Before drawing a turtle, the previous location of the turtle is restored from  _TSaveGDBuffInfo.
Then the new turtle location matrix is saved to _TSaveGDBuffInfo.'
  comment 'Select turtle image: 1-8'
  if (0 == penDirection) {
    Tdir = 1
  } else {
    Tdir = (minimum 8 ((((penDirection / 100) / 45) % 45) + 1))
  }
  local 'col' (x - _TDisp)
  local 'row' (y - _TDisp)
  comment 'Copy turtle img so the original is not modified.'
  local 'Timg' ('[data:makeList]')
  for byte (at Tdir TShapes) {
    '[data:addLast]' byte Timg
  }
  _imgHeight = _TSize
  _imgWidth = _TSize
  comment 'Adjust Turtle image if matrix is out of bounds.'
  if (col < 0) {
    repeat (absoluteValue col) {
      '[data:delete]' 1 Timg
    }
    _imgWidth += col
    col = 0
  }
  if (row < 0) {
    for i (size Timg) {
      atPut i Timg ((at i Timg) >> (absoluteValue row))
    }
    _imgHeight += row
    row = 0
  }
  local 'turtle' ('[data:asByteArray]' Timg)
  '_TSaveGDBuff' col row
  comment 'Draw Turtle'
  for byte turtle {
    local '_yInc' 0
    for bit ('dec2any Base' '2' byte _TSize true) {
      'defer display updates'
      OLEDpixel col (row + _yInc) ('_num2TF' bit)
      _yInc += 1
    }
    col += 1
  }
  OLEDshowGDBuffer
  Tx = x
  Ty = y
}

to '_TRestoreGDBuff' {
  comment 'Erases the drawn Turtle by restoring the previously saved
GDBuffer content at turtle location.'
  for info _TSaveGDBuffInfo {
    atPut (at 1 info) _GDBuffer (at 2 info)
  }
  if TpenPrev {
    OLEDpixel Tx Ty false
  }
}

to '_TSaveGDBuff' x y {
  comment 'Save GDBuff info of Turtle location to be restored later.
x,y is the top left of Turtle matrix from _TDraw.
_imgWidth and _imgHeight is the adj turtle size.'
  local 'prevIdx' 0
  _TSaveGDBuffInfo = ('[data:makeList]')
  repeat _imgWidth {
    repeat _imgHeight {
      _GDIndex = ((x + ((y / 8) * 128)) + 1)
      if (_GDIndex < 1) {
        _GDIndex = 1
      } (_GDIndex > 1024) {
        _GDIndex = 1024
      }
      if (_GDIndex != prevIdx) {
        '[data:addLast]' ('[data:makeList]' _GDIndex (at _GDIndex _GDBuffer)) _TSaveGDBuffInfo
        prevIdx = _GDIndex
      }
      y += 1
    }
    x += 1
    y += (-1 * _imgHeight)
  }
}

to '_num2TF' num {
  comment 'Converts bitmap 0 and 1 binary info to 
true/false flag info that is used to erase pixels.'
  return (num == ('[data:toString]' '0'))
}

to '_toString' aStringOrByteArray {
  comment 'If argument is a byte array, convert it to a string. '
  if (not (isType aStringOrByteArray 'string')) {
    local 'list' ('[data:makeList]')
    for i aStringOrByteArray {
      '[data:addLast]' ('[data:unicodeString]' i) list
    }
    aStringOrByteArray = ('[data:joinStrings]' list)
  }
  return aStringOrByteArray
}

