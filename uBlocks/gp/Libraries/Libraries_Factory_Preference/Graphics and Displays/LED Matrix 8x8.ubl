module 'LED Matrix 8x8' Output
author 'José García Yeste'
version 1 4 
choices rotationMenu '0' '90' '180' '270' 
description 'Suport for Keystudio KS0396 8x8 LED Matrix
It''s possible to use up to 8 modules

https://wiki.keyestudio.com/KS0396_keyestudio_8x8_LED_Matrix_Module_Address_Select
'
variables _lm8x8_buf _lm8x8_rotation _lm8x8_flip 

  spec ' ' 'lm8x8 clear' 'LED Matrix 8x8 _ clear' 'menu.range:1-8' 1
  spec ' ' 'lm8x8 plot' 'LED Matrix 8x8 _ plot x _ y _' 'menu.range:1-8 num num' 1 1 1
  spec ' ' 'lm8x8 unplot' 'LED Matrix 8x8 _ unplot x _ y _' 'menu.range:1-8 num num' 1 1 1
  spec ' ' 'lm8x8_display_char' 'LED Matrix 8x8 _ display character _' 'menu.range:1-8 auto' 1 'A'
  spec ' ' 'lm8x8_display_ascii' 'LED Matrix 8x8 _ display Ascii _' 'menu.range:1-8 num' 1 3
  space
  spec ' ' 'lm8x8_draw_line' 'LED Matrix 8x8 _ draw line from x _ y _ to x _ y _' 'menu.range:1-8 num num num num' 1 1 1 8 8
  spec ' ' 'lm8x8_draw_rect' 'LED Matrix 8x8 _ draw rectangle at x _ y _ width _ height _ filled _' 'menu.range:1-8 num num num num bool' 1 1 1 8 8 true
  spec ' ' 'lm8x8_draw_circle' 'LED Matrix 8x8 _ draw circle at x _ y _ radius _ filled _' 'menu.range:1-8 num num num bool' 1 4 4 3 true
  space
  spec ' ' 'lm8x8 brightness' 'LED Matrix 8x8 _ brightness _ (1-16)' 'menu.range:1-8 num' 1 10
  spec ' ' 'lm8x8_set_rotation' 'LED Matrix 8x8 _ rotation _' 'menu.range:1-8 menu.rotationMenu' 1 0
  spec ' ' 'lm8x8_set_flip' 'LED Matrix 8x8 _ flip _' 'menu.range:1-8 bool' 1 false
  space
  spec ' ' '_lm8x8 setup' '_LED Matrix 8x8 _ setup' 'menu.range:1-8' 1
  spec ' ' '_lm8x8 write' '_LED Matrix 8x8 _ write _' 'menu.range:1-8 auto' 1 0
  spec ' ' '_lm8x8 update' '_LED Matrix 8x8 _ update' 'menu.range:1-8' 1
  spec ' ' '_lm8x8_set_pixel' '_LED Matrix 8x8 _ set pixel x _ y _ to _' 'menu.range:1-8 num num bool' 1 1 1 true

to '_lm8x8 setup' i2c {
  if (_lm8x8_buf == 0) {
    _lm8x8_buf = (newList 8 0)
    _lm8x8_rotation = (newList 8 0)
    _lm8x8_flip = (newList 8 ((boardType) == 'KidsIOT'))
  }
  if ((at i2c _lm8x8_buf) == 0) {
    '_lm8x8 write' i2c (hexToInt '21')
    'lm8x8 brightness' i2c 10
    atPut i2c _lm8x8_buf ('[data:newByteArray]' 8)
    '_lm8x8 update' i2c
    '_lm8x8 write' i2c (hexToInt '81')
  }
}

to '_lm8x8 update' i2c {
  local 'buf' ('[data:newByteArray]' 17)
  comment 'Item 1  must be 0'
  for i 8 {
    atPut (i * 2) buf (at i (at i2c _lm8x8_buf))
    atPut ((i * 2) + 1) buf (at i (at i2c _lm8x8_buf))
  }
  '_lm8x8 write' i2c buf
}

to '_lm8x8 write' i2c data {
  comment '1=0x70, 8=0x77'
  '[sensors:i2cWrite]' (i2c + 111) data
}

to '_lm8x8_set_pixel' i2c x y on {
  if (and (x > 0) (and (y > 0) (and (x < 9) (y < 9)))) {
    if ((at i2c _lm8x8_rotation) == 180) {
      y = (9 - y)
      x = (9 - x)
    } ((at i2c _lm8x8_rotation) == 270) {
      local 'save' x
      x = y
      y = (9 - save)
    } ((at i2c _lm8x8_rotation) == 90) {
      local 'save' x
      x = (9 - y)
      y = save
    }
    if (at i2c _lm8x8_flip) {
      local 'value' (at y (at i2c _lm8x8_buf))
    } else {
      local 'value' (at (9 - y) (at i2c _lm8x8_buf))
    }
    if on {
      value = (value | (1 << (x - 1)))
    } else {
      value = (value & ('~' (1 << (x - 1))))
    }
    if (at i2c _lm8x8_flip) {
      atPut y (at i2c _lm8x8_buf) value
    } else {
      atPut (9 - y) (at i2c _lm8x8_buf) value
    }
  }
}

to 'lm8x8 brightness' i2c brightness {
  if (brightness > 0) {'_lm8x8 write' i2c ((hexToInt 'E0') | (brightness - 1))}
}

to 'lm8x8 clear' i2c {
  '_lm8x8 setup' i2c
  atPut 'all' (at i2c _lm8x8_buf) 0
  '_lm8x8 update' i2c
}

to 'lm8x8 plot' i2c x y {
  '_lm8x8 setup' i2c
  '_lm8x8_set_pixel' i2c x y true
  '_lm8x8 update' i2c
}

to 'lm8x8 unplot' i2c x y {
  '_lm8x8 setup' i2c
  '_lm8x8_set_pixel' i2c x y false
  '_lm8x8 update' i2c
}

to lm8x8_display_ascii i2c char {
  '_lm8x8 setup' i2c
  local 'shape' ('[misc:shapeforChar]' char)
  if (shape != 0) {
    atPut 'all' (at i2c _lm8x8_buf) 0
    for x 5 {
      local 'mask' 1
      for y 8 {
        if (((at x shape) & mask) != 0) {'_lm8x8_set_pixel' i2c (x + 1) y true}
        mask = (mask << 1)
      }
    }
    '_lm8x8 update' i2c
  }
}

to lm8x8_display_char i2c char {
  lm8x8_display_ascii i2c ('[data:toString]' char)
}

to lm8x8_draw_circle i2c x0 y0 radius filled {
  '_lm8x8 setup' i2c
  for y ('[data:range]' (0 - radius) radius) {
    local 'w' ('[misc:sqrt]' ((radius * radius) - (y * y)))
    if filled {
      lm8x8_draw_line i2c (x0 + w) (y0 + y) (x0 + (0 - w)) (y0 + y)
    } else {
      '_lm8x8_set_pixel' i2c (x0 + w) (y0 + y) true
      '_lm8x8_set_pixel' i2c (x0 + y) (y0 + w) true
      '_lm8x8_set_pixel' i2c (x0 + (0 - w)) (y0 + y) true
      '_lm8x8_set_pixel' i2c (x0 + y) (y0 + (0 - w)) true
      '_lm8x8 update' i2c
    }
  }
}

to lm8x8_draw_line i2c x0 y0 x1 y1 {
  '_lm8x8 setup' i2c
  comment 'Bresenham''s Line Algorithm'
  local 'dx' (absoluteValue (x1 - x0))
  local 'dy' (-1 * (absoluteValue (y1 - y0)))
  local 'error' (dx + dy)
  local 'sx' (ifExpression (x0 < x1) 1 -1)
  local 'sy' (ifExpression (y0 < y1) 1 -1)
  forever {
    '_lm8x8_set_pixel' 1 x0 y0 true
    local 'e2' (error * 2)
    if (e2 >= dy) {
      if (x0 == x1) {exitLoop}
      error += dy
      x0 += sx
    }
    if (e2 <= dx) {
      if (y0 == y1) {exitLoop}
      error += dx
      y0 += sy
    }
  }
  '_lm8x8 update' i2c
}

to lm8x8_draw_rect i2c x y width height filled {
  if (and (width > 0) (height > 0)) {
    comment 'first line'
    lm8x8_draw_line i2c x y (x + (width - 1)) y
    y += 1
    if (height > 1) {
      comment 'intermediate lines'
      repeat (height - 2) {
        if filled {
          lm8x8_draw_line i2c x y (x + (width - 1)) y
        } else {
          'lm8x8 plot' i2c (x + (width - 1)) y
          'lm8x8 plot' i2c x y
        }
        y += 1
      }
      comment 'last line'
      lm8x8_draw_line i2c x y (x + (width - 1)) y
    }
  }
}

to lm8x8_set_flip i2c flip {
  '_lm8x8 setup' i2c
  atPut i2c _lm8x8_flip flip
}

to lm8x8_set_rotation i2c rotation {
  atPut i2c _lm8x8_rotation ('[data:convertType]' rotation 'number')
  '_lm8x8 setup' i2c
}

