module WAV Output
author 'José García Yeste'
version 1 3 
description 'Play WAV sound files.
WAV files must be uncompressed, mono or stereo, 8 or 16 bits per sample, sampling rate <= 48000.
Requires a board with a DAC and a file system such as an ESP32.
'

	spec ' ' 'playWAVFile' 'play WAV file _' 'auto' 'filename'
	spec 'r' '_wavChunkID' '_wavChunkID _' 'auto' 'filename'
	spec 'r' '_wavChunkSize' '_wavChunkSize _' 'auto' 'filename'
	spec ' ' '_wavPlayBuffer' '_wavPlayBuffer _ byteCount _ bytesPerSample _ is16Bit _' 'auto num num bool' 'a ByteArray' 0 1 false
	spec ' ' '_wavFail' '_wavFail _' 'auto' ''
	spec 'r' '_wavHeader' '_wavHeader _' 'auto' 'filename'
	spec 'r' '_wavChannels' '_wavChannels _' 'auto' 'a ByteArray'
	spec 'r' '_wavIs16Bit' '_wavIs16Bit _' 'auto' 'a ByteArray'
	spec 'r' '_wavSampleRate' '_wavSampleRate _' 'auto' 'a ByteArray'

to '_wavChannels' header {
  local 'channels' ((at 3 header) | ((at 4 header) << 8))
  if (or (channels < 1) (channels > 2)) {
    '_wavFail' 'Can only play mono or stereo WAV files'
  }
  return channels
}

to '_wavChunkID' filename {
  return ('[data:join]' '' ('[file:readBytes]' 4 filename))
}

to '_wavChunkSize' filename {
  local 'data' ('[file:readBytes]' 4 filename)
  return (((at 1 data) | ((at 2 data) << 8)) | (((at 3 data) << 16) | ((at 4 data) << 24)))
}

to '_wavFail' msg {
  sayIt msg
  halt
}

to '_wavHeader' filename {
  if (('_wavChunkID' filename) != 'RIFF') {'_wavFail' 'Bad WAV file'}
  local 'size' ('_wavChunkSize' filename)
  if (('_wavChunkID' filename) != 'WAVE') {
    '_wavFail' 'Bad WAV file'
  }
  if (('_wavChunkID' filename) != 'fmt ') {
    '_wavFail' 'Bad WAV file'
  }
  local 'size' ('_wavChunkSize' filename)
  local 'header' ('[file:readBytes]' size filename)
  if (or (1 != (at 1 header)) (0 != (at 2 header))) {
    '_wavFail' 'Can only played uncompressed WAV files'
  }
  if (('_wavChunkID' filename) != 'data') {
    '_wavFail' 'Bad WAV file'
  }
  return header
}

to '_wavIs16Bit' header {
  local 'bps' ((at 15 header) | ((at 16 header) << 8))
  if (bps == 8) {
    return false
  } (bps == 16) {
    return true
  }
  '_wavFail' 'WAV file must be 8 or 16 bits per sample'
}

to '_wavPlayBuffer' data byteCount bytesPerSample is16Bit {
  comment 'Write the sound samples in the given ByteArray to the DAC.
The DAC expects unsigned 8-bit samples in the range 0-255.
Samples can be 1, 2, or 4 bytes depending on the combination
of bits/sample (8 or 16) and channels (mono or stereo) but the
last byte of each sample is always the high-order byte of one of
the channels (16-bit samples are little-endian).'
  local 'i' bytesPerSample
  local 'sampleAdjust' 0
  if is16Bit {
    comment '16-bit samples are signed, but the DAC expects unsigned values.
Adding 128 to the high byte of a 16-bit sample converts from a
signed 16-bit sample to an unsigned 8-bit DAC sample.'
    sampleAdjust = 128
  }
  repeatUntil (i > byteCount) {
    local 'sample' (((at i data) + sampleAdjust) & 255)
    if (('[io:dacWrite]' sample) > 0) {
      i += bytesPerSample
    } else {
      waitMillis 1
    }
  }
}

to '_wavSampleRate' header {
  local 'sampleRate' ((at 5 header) | ((at 6 header) << 8))
  if (sampleRate > 48000) {
    '_wavFail' 'Maximum sampling rate is 48000'
  }
  return sampleRate
}

to playWAVFile filename {
  local 'pin' 25
  if ((boardType) == 'Citilab ED1') {
    pin = 26
  }
  if (('[file:fileSize]' filename) == 0) {
    '_wavFail' 'Empty or non-existent WAV file'
  }
  '[file:open]' filename
  local 'header' ('_wavHeader' filename)
  local 'is16Bit' ('_wavIs16Bit' header)
  local 'increment' ('_wavChannels' header)
  if is16Bit {
    increment = (2 * increment)
  }
  '[io:dacInit]' pin ('_wavSampleRate' header)
  local 'bytesRemaining' ('_wavChunkSize' filename)
  local 'data' ('[data:newByteArray]' 100)
  repeatUntil (bytesRemaining <= 0) {
    local 'bytesRead' ('[file:readInto]' data filename)
    '_wavPlayBuffer' data bytesRead increment is16Bit
    bytesRemaining = (bytesRemaining - bytesRead)
  }
  '[file:close]' filename
}

