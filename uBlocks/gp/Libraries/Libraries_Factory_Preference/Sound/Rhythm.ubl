module Rhythm Control
author 'MicroBlocks'
version 2 7 
description 'Keeps time according to a tempo and time signature. Useful to create musical patterns.

Includes abstractions for note durations, bars and beats.
'
variables _rhy_tempo _rhy_bars _rhy_beat_duration _rhy_measures _rhy_reference_note _rhy_start_time 

  spec ' ' 'rhy_set tempo' 'set tempo to _ bpm at _ / _ signature' 'num num num' 120 4 4
  spec ' ' 'rhy_set bars' 'set pattern to _ bars' 'num' 16
  space
  spec 'r' 'rhy_current bar' 'current bar'
  spec 'r' 'rhy_current beat' 'current beat'
  space
  spec ' ' 'rhy_wait until next' 'wait until next _ duration' 'num'
  spec ' ' 'rhy wait until beat' 'wait until beat _' 'num' 3
  spec ' ' 'rhy wait until bar' 'wait until bar _' 'num' 2
  space
  spec 'r' 'rhy_whole duration' '#SVG#note-whole'
  spec 'r' 'rhy_half duration' '#SVG#note-half'
  spec 'r' 'rhy_quarter duration' '#SVG#note-quarter'
  spec 'r' 'rhy_eighth duration' '#SVG#note-eighth'
  spec 'r' 'rhy_sixteenth duration' '#SVG#note-sixteenth'
  space
  spec 'r' 'rhy_dotted' '_ .' 'auto' ''
  spec 'r' 'rhy_triplet' '‿³ _' 'auto' ''
  space
  spec 'r' '_rhy duration of note value' '_rhy duration of note value _' 'auto' 4
  spec 'r' '_rhy 2 ^' '_rhy 2 ^ _' 'auto' '10'
  spec 'r' '_rhy between' '_rhy _ between _ and _' 'auto auto auto' '10' '10' '10'

to '_rhy 2 ^' n {
  local 'result' 1
  repeat n {
    result = (result * 2)
  }
  return result
}

to '_rhy between' foo a b {
  return (and (foo >= a) (foo <= b))
}

to '_rhy duration of note value' 'note value' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 120 4 4}
  return ((_rhy_beat_duration * _rhy_reference_note) / (v 'note value'))
}

to 'rhy wait until bar' 'bar number' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 120 4 4}
  if (_rhy_bars == 0) {'rhy_set bars' 16}
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'round duration' ((v 'bar duration') * _rhy_bars)
  local 'wakeTime' ((((v 'round duration') * (((millisOp) / (v 'round duration')) + 1)) + (((v 'bar number') - 1) * (v 'bar duration'))) - _rhy_start_time)
  waitMillis ((wakeTime - (millisOp)) % (v 'round duration'))
}

to 'rhy wait until beat' 'beat number' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 120 4 4}
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'wakeTime' ((((v 'bar duration') * (((millisOp) / (v 'bar duration')) + 1)) + (((v 'beat number') - 1) * _rhy_beat_duration)) - _rhy_start_time)
  waitMillis ((wakeTime - (millisOp)) % (v 'bar duration'))
}

to 'rhy_current bar' {
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'round duration' ((v 'bar duration') * _rhy_bars)
  return (((((millisOp) - _rhy_start_time) % (v 'round duration')) / (v 'bar duration')) + 1)
}

to 'rhy_current beat' {
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  return (((((millisOp) - _rhy_start_time) % (v 'bar duration')) / _rhy_beat_duration) + 1)
}

to rhy_dotted duration {
  return (duration + (duration / 2))
}

to 'rhy_eighth duration' {
  return ('_rhy duration of note value' 8)
}

to 'rhy_half duration' {
  return ('_rhy duration of note value' 2)
}

to 'rhy_quarter duration' {
  return ('_rhy duration of note value' 4)
}

to 'rhy_set bars' bars {
  if (_rhy_measures == 0) {'rhy_set tempo' 240 4 4}
  _rhy_bars = bars
  _rhy_start_time = (millisOp)
}

to 'rhy_set tempo' tempo measures 'note value' {
  _rhy_tempo = tempo
  _rhy_reference_note = (v 'note value')
  _rhy_beat_duration = (60000 / _rhy_tempo)
  _rhy_measures = measures
  _rhy_start_time = (millisOp)
}

to 'rhy_sixteenth duration' {
  return ('_rhy duration of note value' 16)
}

to rhy_triplet duration {
  return ((duration * 2) / 3)
}

to 'rhy_wait until next' duration {
  local 'wakeTime' ((duration * (((millisOp) / duration) + 1)) - _rhy_start_time)
  waitMillis ((wakeTime - (millisOp)) % duration)
}

to 'rhy_whole duration' {
  return ('_rhy duration of note value' 1)
}

