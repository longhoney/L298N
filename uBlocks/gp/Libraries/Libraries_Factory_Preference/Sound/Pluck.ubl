module Pluck Output
author MicroBlocks
version 1 2 
depends _Tone 
description 'Uses a simple algorithm to synthesize a plucked-string sound similar to an acoustic guitar (see https://en.wikipedia.org/wiki/Karplusâ€“Strong_string_synthesis).

Note: This library does NOT work on the original micro:bit or Calliope mini!

To output the generated waveform, the board must have a DAC (e.g. SAMD21 and ESP32 boards) or fast enough pulse-width modulation (PWM) hardware to simulate a DAC (e.g. nRF52xxx boards). To tune the output to standard A=440 pitch on boards with different clock speeds, change the tuningConstant variable in _pitchToBufferLength.'
variables _pluckInitialized _pluckPin _pluckShift _pluckOffset 

	spec ' ' 'pluckNote' 'pluck note _ octave _ for _ ms' 'str num num' 'C' 0 3000
	spec ' ' 'pluckMidiKey' 'pluck MIDI key _ for _ msecs' 'num num' 60 3000
	spec ' ' 'setPluckPin' 'set pluck pin _' 'auto' ''
	spec ' ' '_initPluck' '_initPluck'
	spec ' ' '_playPluck' '_playPluck _ for _ msecs' 'num num' 80 3000
	spec 'r' '_pitchToBufferLength' '_pitchToBufferLength _' 'num' 440
	spec 'r' '_midiKeyToPitch' '_midiKeyToPitch _' 'num' 60

to '_initPluck' {
  _pluckShift = 0
  _pluckOffset = 512
  if ((boardType) == 'micro:bit v2') {
    _pluckPin = 27
  } ((boardType) == 'Clue') {
    _pluckPin = 21
  } (or ((boardType) == 'Citilab ED1') ((boardType) == 'M5StickC')) {
    _pluckShift = 3
    _pluckOffset = 128
    _pluckPin = 26
  } ((boardType) == 'M5Stack-Core') {
    _pluckShift = 3
    _pluckOffset = 128
    _pluckPin = 25
  } else {
    _pluckPin = 0
  }
  _pluckInitialized = true
}

to '_midiKeyToPitch' key {
  local 'freq' (at ((key % 12) + 1) ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  return (freq / 1000)
}

to '_pitchToBufferLength' pitch {
  comment 'Adjust the tuning constant so that pluck pitch is correct.
(Compare with a piano or other instrument.)'
  local 'tuningConstant' 21000
  return (maximum 3 (tuningConstant / pitch))
}

to '_playPluck' bufSize msecs {
  if (not _pluckInitialized) {'_initPluck'}
  local 'buf' (newList bufSize)
  for i (bufSize / 5) {
    atPut i buf (random -400 400)
  }
  local 'endTime' ((millisOp) + msecs)
  repeatUntil ((millisOp) > endTime) {
    for i (bufSize - 1) {
      local 'sample' (((at i buf) + (at (i + 1) buf)) / 2)
      atPut i buf sample
      sample = ((sample >> _pluckShift) + _pluckOffset)
      analogWriteOp _pluckPin sample
      waitMicros 20
    }
    atPut bufSize buf (at 1 buf)
  }
}

to pluckMidiKey key msecs {
  local 'pitch' ('_midiKeyToPitch' key)
  '_playPluck' ('_pitchToBufferLength' pitch) msecs
}

to pluckNote note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    comment 'Rest or unrecognized note'
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_playPluck' ('_pitchToBufferLength' (freq / 1000)) ms
}

to setPluckPin pin {
  if (pin == '') {
    _pluckInitialized = false
    return 0
  }
  _pluckPin = pin
  _pluckShift = 0
  _pluckOffset = 512
  _pluckInitialized = true
}

