module 'Analog Synthesis' Operators
author MicroBlocks
version 1 10 
choices outputTypes 'asy;pin' 'asy;MCP4725' 
description 'Generate analog waves that you can output to a DAC or analog pin to produce sound.

You can create your own instruments by adding waves together, and you can define envelopes for gates and trigger them at will, or create sound textures by mixing waves.

Amplitude range: -32768 to 32767 (16 bits signed)
'
variables _asynth_trigger_active _asynth_trigger_times _asynth_frequencies _asynth_frequency_table _asynth_amplitudes _asynth_attacks _asynth_holds _asynth_releases _asynth_total_durations _asynth_ramp_starts _asynth_ramp_ends '_mcp4725 out' 

  spec ' ' 'asynth output' 'output _ to _ : number/address _ : asynth;resolution _' 'num menu.outputTypes num num' 1024 'asy;pin' 25 10
  space
  spec 'r' 'asynth sin' '#SVG#wave-sine _ Hz _ #SVG#double-arrow-v' 'num num' 440 10000
  spec 'r' 'asynth square' '#SVG#wave-square _ Hz _ #SVG#double-arrow-v' 'num num' 185 8000
  spec 'r' 'asynth tri' '#SVG#wave-triangle _ Hz _ #SVG#double-arrow-v' 'num num' 392 10000
  spec 'r' 'asynth saw' '#SVG#wave-sawtooth _ Hz _ #SVG#double-arrow-v' 'num num' 196 8000
  spec 'r' 'asynth noise' '#SVG#wave-noise _ Hz _ #SVG#double-arrow-v' 'num num' 500 4000
  space
  spec 'r' 'asynth sin gate' '#SVG#wave-sine gate _' 'menu.range:1-8' 1
  spec 'r' 'asynth square gate' '#SVG#wave-square gate _' 'menu.range:1-8' 1
  spec 'r' 'asynth tri gate' '#SVG#wave-triangle gate _' 'menu.range:1-8' 1
  spec 'r' 'asynth saw gate' '#SVG#wave-sawtooth gate _' 'menu.range:1-8' 1
  spec 'r' 'asynth noise gate' '#SVG#wave-noise gate _' 'menu.range:1-8' 1
  space
  spec ' ' 'asynth envelope' 'set amplitude _ attack _ hold _ release _ for gate _' 'num num num num menu.range:1-8' 10000 10 250 100 1
  spec ' ' 'asynth ramp' 'set frequency ramp from _ % to _ % for gate _' 'num num menu.range:1-8' 100 10 1
  spec ' ' 'asynth trigger gate' 'trigger gate _ MIDI key _' 'menu.range:1-8 num' 1 60
  space
  spec 'r' 'asynth gate amplitude' 'amplitude for gate _' 'menu.range:1-8' 1
  spec 'r' 'asynth gate frequency' 'frequency for gate _' 'menu.range:1-8' 1
  space
  spec ' ' '_asynth init' '_asynth init'
  spec 'r' '_asynth MIDI to freq' '_asynth MIDI note _ to frequency' 'auto' 60

to '_asynth MIDI to freq' key {
  local 'semitone' ((key % 12) + 1)
  local 'octave' ((key / 12) - 5)
  if (_asynth_frequency_table == 0) {
    _asynth_frequency_table = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)
  }
  if (and (1 <= semitone) (semitone <= (size _asynth_frequency_table))) {
    local 'freq' (at semitone _asynth_frequency_table)
    if (octave < 0) {
      repeat (absoluteValue octave) {
        freq = (freq / 2)
      }
    }
    repeat octave {
      freq = (freq * 2)
    }
    return (freq / 1000)
  } else {
    return 10000
  }
}

to '_asynth init' {
  if (_asynth_trigger_times != 0) {return 0}
  _asynth_trigger_active = (newList 8 (booleanConstant false))
  _asynth_trigger_times = (newList 8)
  _asynth_frequencies = (newList 8)
  _asynth_amplitudes = (newList 8)
  _asynth_attacks = (newList 8)
  _asynth_holds = (newList 8)
  _asynth_releases = (newList 8)
  _asynth_total_durations = (newList 8)
  _asynth_ramp_starts = (newList 8 -1)
  _asynth_ramp_ends = (newList 8)
}

to 'asynth envelope' amp att hold release gate {
  '_asynth init'
  atPut gate _asynth_amplitudes amp
  atPut gate _asynth_attacks att
  atPut gate _asynth_holds hold
  atPut gate _asynth_releases release
  atPut gate _asynth_total_durations (sum att hold release)
}

to 'asynth gate amplitude' gate {
  if (not (at gate _asynth_trigger_active)) {return 0}
  local 'start time' (at gate _asynth_trigger_times)
  local 'amp' (at gate _asynth_amplitudes)
  local 'att' (maximum 1 (at gate _asynth_attacks))
  local 'hold' (at gate _asynth_holds)
  local 'release' (maximum 1 (at gate _asynth_releases))
  if ((millisOp) < (v 'start time')) {
    return 0
  } ((millisOp) > (((v 'start time') + att) + (hold + release))) {
    atPut gate _asynth_trigger_active (booleanConstant false)
    return 0
  } ((millisOp) > (((v 'start time') + att) + hold)) {
    return (amp - ((amp * ((millisOp) - (((v 'start time') + att) + hold))) / release))
  } ((millisOp) > ((v 'start time') + att)) {
    return amp
  } else {
    return ((amp * ((millisOp) - (v 'start time'))) / att)
  }
}

to 'asynth gate frequency' gate {
  local 'base' (at gate _asynth_frequencies)
  if ((at gate _asynth_ramp_starts) == -1) {
    return base
  }
  local 'freq1' (base * (at gate _asynth_ramp_starts))
  local 'freq2' (base * (at gate _asynth_ramp_ends))
  return ((freq1 + ((freq2 - freq1) / (maximum 1 ((at gate _asynth_total_durations) / (maximum 1 ((millisOp) - (at gate _asynth_trigger_times))))))) / 100)
}

to 'asynth noise' freq amp {
  if (amp < 1) {return 0}
  local 'ms' (1000000 / freq)
  waitMicros ms
  return (random (0 - amp) amp)
}

to 'asynth noise gate' gate {
  '_asynth init'
  if (at gate _asynth_trigger_active) {
    return ('asynth noise' ('asynth gate frequency' gate) ('asynth gate amplitude' gate))
  }
  return 0
}

to 'asynth output' sample 'output type' destination bits {
  if ((v 'output type') == 'asy;pin') {
    local 'bits' (argOrDefault 4 10)
    analogWriteOp destination (maximum 0 (minimum (((1 << bits) / 2) + (sample >> (16 - bits))) ((1 << bits) - 1)))
  } else {
    if ((v '_mcp4725 out') == 0) {'_mcp4725 out' = (newList 3 64)}
    sample = (maximum 0 (minimum (2048 + (sample >> 4)) 4095))
    atPut 2 (v '_mcp4725 out') ((sample >> 8) & 15)
    atPut 3 (v '_mcp4725 out') (sample & 255)
    '[sensors:i2cWrite]' (argOrDefault 3 96) (v '_mcp4725 out')
  }
}

to 'asynth ramp' start end gate {
  '_asynth init'
  atPut gate _asynth_ramp_starts start
  atPut gate _asynth_ramp_ends end
}

to 'asynth saw' freq amp {
  if (or (amp < 1) (freq < 1)) {return 0}
  local 'ms' (1000000 / freq)
  return ((((2 * amp) * ((microsOp) % ms)) / ms) - amp)
}

to 'asynth saw gate' gate {
  '_asynth init'
  if (at gate _asynth_trigger_active) {
    return ('asynth saw' ('asynth gate frequency' gate) ('asynth gate amplitude' gate))
  }
  return 0
}

to 'asynth sin' freq amp {
  if (or (amp < 1) (freq < 1)) {return 0}
  local 'ms' (1000000 / freq)
  return (((2 * amp) * ('[misc:sin]' ((3600 * ((microsOp) % ms)) / (ms / 10)))) >> 15)
}

to 'asynth sin gate' gate {
  '_asynth init'
  if (at gate _asynth_trigger_active) {
    return ('asynth sin' ('asynth gate frequency' gate) ('asynth gate amplitude' gate))
  }
  return 0
}

to 'asynth square' freq amp {
  if (or (amp < 1) (freq < 1)) {return 0}
  local 'ms' (1000000 / freq)
  return (ifExpression (((microsOp) % ms) > (ms / 2)) amp (0 - amp))
}

to 'asynth square gate' gate {
  '_asynth init'
  if (at gate _asynth_trigger_active) {
    return ('asynth square' ('asynth gate frequency' gate) ('asynth gate amplitude' gate))
  }
  return 0
}

to 'asynth tri' freq amp {
  if (or (amp < 1) (freq < 1)) {return 0}
  local 'ms' (1000000 / freq)
  return ((((4 * amp) * (absoluteValue (((microsOp) % ms) - (ms / 2)))) / ms) - amp)
}

to 'asynth tri gate' gate {
  '_asynth init'
  if (at gate _asynth_trigger_active) {
    return ('asynth tri' ('asynth gate frequency' gate) ('asynth gate amplitude' gate))
  }
  return 0
}

to 'asynth trigger gate' index key {
  '_asynth init'
  atPut index _asynth_frequencies ('_asynth MIDI to freq' key)
  atPut index _asynth_trigger_times (millisOp)
  atPut index _asynth_trigger_active (booleanConstant true)
}

