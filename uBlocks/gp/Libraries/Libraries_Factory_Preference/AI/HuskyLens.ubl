module HuskyLens Input
author 'Murat Akguller, Turgut Guneysu'
version 2 1 
choices requestByMenu Blocks Arrows 
choices requestedMenu Blocks Arrows 'Learned Blocks' 'Learned Arrows' 
choices changeAlgoMenu 'Color Recog' 'Face Recog' 'Line Track' 'Obj Classify' 'Obj Recog' 'Obj Track' 'Tag Recog' 
choices getInfoMenu 'Object Count' 'Learned Count' 'Frame Number' 
choices requestFileMenu 'Save Model' 'Load Model' 
choices doMenu Knock 'Save Picture' 'Save Screenshot' 'Forget Learned Objects' 'Clear Screen' 'is pro' 'firmware version' 
choices getArrowMenu 'X origin' 'Y origin' 'X target' 'Y target' id 
choices getBlockMenu 'X center' 'Y center' Width Height id 
choices requestPhotoMenu 'Save Picture' 'Save Screenshot' 
description 'Integrates DFROBOT HuskyLens camera into MicroBlocks.
Supports I2C and Serial 9600 
Full Arduino Lib support
Changes: 
- New _HLinitLib auto init
- New HL set Comms
- Renamed Learn blocks
- SERIAL 9600 support
- SERIAL read size correction
- Parsing correction
'
variables HuskyData HL_I2C_address _buffer _cmd_list _get_lists _bufferdata HL_initalized _currAlgo _algo_list _serialMode 

  spec ' ' 'HL set Comms' 'HL set Comms i2cAddr _ serial _' 'str bool' '32' false
  spec ' ' 'HL change algorithm' 'HL change algorithm _' 'menu.changeAlgoMenu' 'Face Recog'
  spec 'r' 'HL do' 'HL do _' 'menu.doMenu' 'Knock'
  spec ' ' 'HL request' 'HL request _' 'menu.requestedMenu' 'Blocks'
  spec ' ' 'HL request by ID' 'HL request by ID _ Object _' 'num menu.requestByMenu' 1 'Blocks'
  spec 'r' 'HL get arrow' 'HL get arrow _ arrow index _' 'menu.getArrowMenu num' 'X origin' 1
  spec 'r' 'HL get block' 'HL get block _ block index _' 'menu.getBlockMenu num' 'X center' 1
  spec 'r' 'HL get info' 'HL get info _' 'menu.getInfoMenu' 'Object Count'
  spec 'r' 'HL learn current object as ID' 'HL learn current object as ID _' 'num' 1
  spec 'r' 'HL learn object as ID' 'HL learn object as ID _ Name _' 'num str' 1 'name'
  spec 'r' 'HL set CustomName' 'HL set CustomName _ for a learned object with ID _' 'str num' 'name' 1
  spec ' ' 'HL write' 'HL write _ at x _ y _' 'str num num' 'Hello!' 0 0
  spec 'r' 'HL file' 'HL file _ file# _' 'menu.requestFileMenu num' 'Save Model' 1
  spec 'r' '_HLcalc_checkSum' '_HLcalc_checkSum _' 'auto' '10'
  spec 'r' '_HLcheck' '_HLcheck'
  spec ' ' '_HLcmd_init' '_HLcmd_init'
  spec 'r' '_HLcmdarrow43' '_HLcmdarrow43 _' 'auto' 'return arrow'
  spec 'r' '_HLcmdblock42' '_HLcmdblock42 _' 'auto' 'return block'
  spec 'r' '_HLcmdinfo41' '_HLcmdinfo41 _' 'auto' 'return info'
  spec 'r' '_HLdecode_bufferdata' '_HLdecode_bufferdata _' 'auto' 'buffer data'
  spec 'r' '_HLgetcmdnum' '_HLgetcmdnum _' 'auto' 'Blocks'
  spec ' ' '_HLgetdata_from_cmd' '_HLgetdata_from_cmd'
  spec ' ' '_HLinitLib' '_HLinitLib'
  spec ' ' '_HLsendCommand' '_HLsendCommand _ data _' 'auto auto' 10 '10'

to 'HL change algorithm' algo {
  if (not HL_initalized) {'_HLinitLib'}
  local 'data' ('[data:makeList]' (at (('[data:find]' algo _algo_list) + 1) _algo_list) 0)
  '_HLsendCommand' 45 ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  _currAlgo = algo
}

to 'HL do' command {
  if (not HL_initalized) {'_HLinitLib'}
  local 'data' ('[data:newByteArray]' 0)
  local 'cmd_num' ('_HLgetcmdnum' command)
  '_HLsendCommand' cmd_num data
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL file' action fileNum {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (fileNum <= 0) (fileNum > 65535)) {return 'File number range: 0-65535'}
  local 'data' ('[data:makeList]' (fileNum % 256) (fileNum / 256))
  '_HLsendCommand' ('_HLgetcmdnum' action) ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL get arrow' arrowDetails inx {
  if ((size HuskyData) == 1) {
    return 'No Object Detected'
  } ((size HuskyData) == 0) {
    return 'HuskyData is empty, Make a request'
  }
  if (inx <= 0) {
    return 'Index Error'
  } (inx > ((size HuskyData) - 1)) {
    return 'Index Error but Object detected'
  }
  local 'split_data' ('[data:split]' (at (inx + 1) HuskyData) ',')
  return ((at ('[data:find]' arrowDetails (at 2 _get_lists)) split_data) + 0)
}

to 'HL get block' blockDetails inx {
  if ((size HuskyData) == 1) {
    return 'No Object Detected'
  } ((size HuskyData) == 0) {
    return 'HuskyData is empty, Make a request'
  }
  if (inx <= 0) {
    return 'Index Error'
  } (inx > ((size HuskyData) - 1)) {
    return 'Index Error but Object detected'
  }
  local 'split_data' ('[data:split]' (at (inx + 1) HuskyData) ',')
  return ((at ('[data:find]' blockDetails (at 1 _get_lists)) split_data) + 0)
}

to 'HL get info' infoDetails {
  if ((size HuskyData) == 0) {return 'HuskyData is empty, Make a request'}
  local 'split_data' ('[data:split]' (at 1 HuskyData) ',')
  return ((at ('[data:find]' infoDetails (at 3 _get_lists)) split_data) + 0)
}

to 'HL learn current object as ID' id {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (id <= 0) (id > 255)) {return 'ID must be 0 - 255'}
  local 'data' ('[data:makeList]' (id % 256) (id / 256))
  '_HLsendCommand' ('_HLgetcmdnum' 'Learn ById') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL learn object as ID' id name {
  if (not HL_initalized) {'_HLinitLib'}
  if (('HL learn current object as ID' id) == 'OK') {return ('HL set CustomName' name id)}
}

to 'HL request' objName {
  if (not HL_initalized) {'_HLinitLib'}
  '_HLsendCommand' ('_HLgetcmdnum' objName) ('[data:newByteArray]' 0)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  HuskyData = ('_HLdecode_bufferdata' _bufferdata)
  if (('HL get info' 'Object Count') != ((size HuskyData) - 1)) {
    HuskyData = ('[data:makeList]')
  }
}

to 'HL request by ID' id objName {
  if (not HL_initalized) {'_HLinitLib'}
  local 'resultList' ('[data:makeList]')
  if (or (id <= 0) (id > 65535)) {
    return 'ID must be greater than 0 and less than 65536'
  }
  local 'data' ('[data:makeList]' (id % 256) (id / 256))
  '_HLsendCommand' ('_HLgetcmdnum' ('[data:join]' 'ById' objName)) ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  HuskyData = ('_HLdecode_bufferdata' _bufferdata)
  if (and ((('HL get info' 'Object Count') + 1) != (size HuskyData)) (('HL get info' 'Object Count') == 0)) {
    HuskyData = ('[data:makeList]')
  }
}

to 'HL set Comms' addr serial {
  '_HLinitLib'
  HL_I2C_address = (hexToInt addr)
  _serialMode = serial
  if (and (HL_I2C_address == 0) (not _serialMode)) {
    sayIt 'I2C address can not be 0, Set I2C address'
    stopTask
  } _serialMode {
    '[serial:open]' 9600
  }
  if (not _serialMode) {
    sayIt 'I2C: ON, Serial: OFF'
  } else {
    sayIt 'I2C: OFF, Serial: ON'
  }
}

to 'HL set CustomName' name id {
  if (not HL_initalized) {'_HLinitLib'}
  if (or (id <= 0) (id > 255)) {return 'ID must be 0 - 255'}
  local 'data' ('[data:makeList]' id ((size name) + 1))
  for byte ('[data:asByteArray]' name) {
    '[data:addLast]' byte data
  }
  '[data:addLast]' 0 data
  '_HLsendCommand' ('_HLgetcmdnum' 'Set Custom Name') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
  '_HLgetdata_from_cmd'
  return ('_HLdecode_bufferdata' _bufferdata)
}

to 'HL write' text x y {
  if (not HL_initalized) {'_HLinitLib'}
  if ((size text) >= 20) {
    sayIt 'Text string must be less than 20 characters'
    stopTask
  }
  if (or (x >= 320) (x < 0)) {
    sayIt 'X must be 0-319'
    stopTask
  }
  if (or (y >= 240) (y < 0)) {
    sayIt 'Y must be 0-239'
    stopTask
  }
  local 'data' ('[data:makeList]' (size text))
  if (x >= 255) {
    '[data:addLast]' 255 data
  } else {
    '[data:addLast]' 0 data
  }
  '[data:addLast]' (x % 256) data
  '[data:addLast]' y data
  for byte ('[data:asByteArray]' text) {
    '[data:addLast]' byte data
  }
  '_HLsendCommand' ('_HLgetcmdnum' 'Write') ('[data:asByteArray]' data)
  waitUntil ('_HLcheck')
}

to '_HLcalc_checkSum' cmdData {
  local 'checksum' 0
  for byte cmdData {
    checksum += byte
  }
  return (checksum % 256)
}

to '_HLcheck' {
  comment 'I2C reads n bytes in List or Bytearray format
SERIAL only reads Bytearrays of 0-n length
Therefore:
  for SERIAL, we change the lookups to bytearray'
  _buffer = (newList 32)
  _bufferdata = ('[data:makeList]')
  local 'returned' (booleanConstant false)
  local 'lookupResult' 0
  local 'serBuff' 0
  repeatUntil (returned == (booleanConstant true)) {
    waitMillis 20
    if _serialMode {
      waitMillis 50
      _buffer = ('[data:convertType]' ('[serial:read]') 'list')
    } else {
      '[sensors:i2cRead]' HL_I2C_address _buffer
    }
    lookupResult = ('[data:find]' '8517017' ('[data:joinStrings]' _buffer))
    if (lookupResult > 0) {
      _bufferdata = ('[data:join]' _bufferdata _buffer)
      returned = (booleanConstant true)
    } else {
      returned = (booleanConstant false)
    }
  }
  return returned
}

to '_HLcmd_init' {
  _cmd_list = ('[data:makeList]' 'Blocks' 33 'Arrows' 34 'Learned Blocks' 36 'Learned Arrows' 37 'Knock' 44 'Save Picture' 48 'Save Screenshot' 57 'Forget Learned Objects' 55 'Clear Screen' 53 'firmware version' 60 'is pro' 59 'ByIdBlocks' 39 'ByIdArrows' 40 'Change Algorithm' 45 'Save Model' 50 'Load Model' 51 'Learn ById' 54 'Set Custom Name' 47 'Write' 52)
  _get_lists = ('[data:makeList]' ('[data:makeList]' 'B' 'X center' 'Y center' 'Width' 'Height' 'id') ('[data:makeList]' 'A' 'X origin' 'Y origin' 'X target' 'Y target' 'id') ('[data:makeList]' 'I' 'Object Count' 'Learned Count' 'Frame Number'))
}

to '_HLcmdarrow43' obj_data {
  return ('[data:join]' 'A' ',' (((at 4 obj_data) * 256) + (at 3 obj_data)) ',' (((at 6 obj_data) * 256) + (at 5 obj_data)) ',' (((at 8 obj_data) * 256) + (at 7 obj_data)) ',' (((at 10 obj_data) * 256) + (at 9 obj_data)) ',' (('[data:join]' (at 12 obj_data) (at 11 obj_data)) + 0))
}

to '_HLcmdblock42' obj_data {
  return ('[data:join]' 'B' ',' (((at 4 obj_data) * 256) + (at 3 obj_data)) ',' (((at 6 obj_data) * 256) + (at 5 obj_data)) ',' (((at 8 obj_data) * 256) + (at 7 obj_data)) ',' (((at 10 obj_data) * 256) + (at 9 obj_data)) ',' (('[data:join]' (at 12 obj_data) (at 11 obj_data)) + 0))
}

to '_HLcmdinfo41' info_data {
  return ('[data:join]' 'I' ',' (('[data:join]' (at 4 info_data) (at 3 info_data)) + 0) ',' (('[data:join]' (at 6 info_data) (at 5 info_data)) + 0) ',' (((at 8 info_data) * 256) + (at 7 info_data)))
}

to '_HLdecode_bufferdata' data {
  comment 'Split Buffer Data 0x55 0xAA 0x11
dec85 dec170 dec17 '
  local 'parsed_data' ('[data:split]' ('[data:joinStrings]' data ',') '85,170,17,')
  '[data:delete]' 1 parsed_data
  comment 'split each parsed data(string)  for  decoding'
  for i (size parsed_data) {
    atPut i parsed_data ('[data:split]' (at i parsed_data) ',')
  }
  comment 'What is returned?
INFO?41 OK?46 IS PRO?59'
  if (((at 2 (at 1 parsed_data)) + 0) == 41) {
    local 'data_item' ('[data:makeList]')
    local 'decoded_dataList' ('[data:makeList]')
    '[data:addLast]' ('_HLcmdinfo41' (at 1 parsed_data)) decoded_dataList
    if ((size parsed_data) > 1) {
      if (((at 2 (at 2 parsed_data)) + 0) == 42) {
        for i ((size parsed_data) - 1) {
          data_item = (at (i + 1) parsed_data)
          '[data:addLast]' ('_HLcmdblock42' data_item) decoded_dataList
        }
      } else {
        for i ((size parsed_data) - 1) {
          data_item = (at (i + 1) parsed_data)
          '[data:addLast]' ('_HLcmdarrow43' data_item) decoded_dataList
        }
      }
    }
    return decoded_dataList
  } (((at 2 (at 1 parsed_data)) + 0) == 46) {
    return 'OK'
  } (((at 2 (at 1 parsed_data)) + 0) == 59) {
    if ((at 3 (at 1 parsed_data)) == 1) {
      return 'pro version'
    } else {
      return 'not pro version'
    }
  }
}

to '_HLgetcmdnum' cmdName {
  return (at (('[data:find]' cmdName _cmd_list) + 1) _cmd_list)
}

to '_HLgetdata_from_cmd' {
  comment 'I2C reads n bytes in List or Bytearray format
SERIAL only reads Bytearrays of 0-n length'
  repeatUntil (0 == (('[data:joinStrings]' _buffer) + 0)) {
    if _serialMode {
      waitMillis 50
      _buffer = ('[data:convertType]' ('[serial:read]') 'list')
    } else {
      '[sensors:i2cRead]' HL_I2C_address _buffer
    }
    _bufferdata = ('[data:join]' _bufferdata _buffer)
  }
}

to '_HLinitLib' {
  '_HLcmd_init'
  _algo_list = ('[data:makeList]' 'Color Recog' 4 'Face Recog' 0 'Line Track' 3 'Obj Classify' 6 'Obj Recog' 2 'Obj Track' 1 'Tag Recog' 5)
  HuskyData = ('[data:makeList]')
  _bufferdata = ('[data:makeList]')
  _buffer = (newList 32)
  HL_initalized = (booleanConstant true)
}

to '_HLsendCommand' cmd data {
  _buffer = ('[data:join]' ('[data:asByteArray]' ('[data:makeList]' 85 170 17 (size data) cmd)) data)
  _buffer = ('[data:join]' _buffer ('[data:asByteArray]' ('_HLcalc_checkSum' _buffer)))
  if _serialMode {
    '[serial:write]' _buffer
    waitMillis 50
  } else {
    '[sensors:i2cWrite]' HL_I2C_address _buffer
  }
}

